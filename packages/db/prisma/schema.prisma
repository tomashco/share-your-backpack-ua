generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Author {
  authorId     String  @id @unique @default(cuid())
  packs        Pack[]
  unit         String? @default("g")
  item         Item[]
  isSubscribed Boolean @default(false)
}

model Pack {
  packId       String     @id @unique @default(cuid())
  createdAt    DateTime   @default(now())
  name         String     @db.VarChar(255)
  author       Author[]
  description  String?    @db.Text
  activityType String?    @db.VarChar(255)
  packItems    PackItem[]

  @@fulltext([name, description])
}

model Item {
  // primary entity, belonged by multiple packs and possibly multiple users if shared
  itemId       String     @id @unique @default(cuid())
  item         PackItem[] @relation(name: "item")
  locationItem PackItem[] @relation(name: "locationItem")
  name         String
  isMeal       Boolean    @default(false)
  isBag        Boolean    @default(false)
  createdAt    DateTime   @default(now())
  brand        String?
  imageUrl     String?
  itemUrl      String?
  weight       Int? // weight in grams, can be converted reviewing author specific scale
  author       Author     @relation(fields: [itemAuthorId], references: [authorId])
  itemAuthorId String

  @@index([itemAuthorId])
  @@fulltext([name, brand])
}

model PackItem {
  // Item metadata related to specific pack
  packItemId   String   @id @unique @default(cuid())
  item         Item     @relation(name: "item", fields: [packItemItemId], references: [itemId], onUpdate: Cascade, onDelete: Cascade)
  pack         Pack     @relation(fields: [packItemPackId], references: [packId])
  createdAt    DateTime @default(now())
  isWorn       Boolean  @default(false)
  quantity     Int      @default(1)
  category     String?
  location     String?
  locationItem Item?    @relation(name: "locationItem", fields: [locationItemItemId], references: [itemId], onUpdate: Cascade, onDelete: Cascade)

  tag                Tag[]
  packItemPackId     String
  locationItemItemId String?
  packItemItemId     String

  @@index([packItemPackId])
  @@index([packItemItemId])
  @@index([locationItemItemId])
}

model Tag {
  tagId     String     @id @unique @default(cuid())
  name      String
  packItems PackItem[]
}
