generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Author {
  authorId      String          @id @unique @default(cuid())
  packs         Pack[]
  unit          String?         @default("g")
  item          Item[]
  itemSelection ItemSelection[]
  isSubscribed  Boolean         @default(false)
}

model Pack {
  packId       String     @id @unique @default(cuid())
  createdAt    DateTime   @default(now())
  name         String     @db.VarChar(255)
  author       Author[]
  description  String?    @db.Text
  activityType String?    @db.VarChar(255)
  packItems    PackItem[]

  @@fulltext([name, description])
}

model Item {
  itemId       String          @id @unique @default(cuid())
  name         String
  createdAt    DateTime        @default(now())
  brand        String?
  imageUrl     String?
  itemUrl      String?
  weight       Int? // weight in grams, can be converted reviewing author specific scale
  author       Author          @relation(fields: [itemAuthorId], references: [authorId])
  itemAuthorId String
  selections   ItemSelection[]

  @@index([itemAuthorId])
  @@fulltext([name, brand])
}

model ItemSelection {
  selectionId           String            @id @unique @default(cuid())
  // authorId            String
  author                Author            @relation(fields: [itemSelectionAuthorId], references: [authorId])
  item                  Item              @relation(fields: [itemSelectionItemId], references: [itemId])
  itemSelectionItemId   String
  itemSelectionAuthorId String
  // selectionPackItemId String
  createdAt             DateTime          @default(now())
  itemModification      ItemModification?
  packItem              PackItem?

  @@index([itemSelectionItemId])
  @@index([itemSelectionAuthorId])
}

model ItemModification {
  modificationId              String        @id @unique @default(cuid())
  selection                   ItemSelection @relation(fields: [itemModificationSelectionId], references: [selectionId])
  itemModificationSelectionId String        @unique
  imageUrl                    String?
  itemUrl                     String?
  modifiedAt                  DateTime      @default(now())
  // modifiedBy                  String // Identifier of the user who made the modification

  @@index([itemModificationSelectionId])
}

model PackItem {
  // Item metadata related to specific pack
  packItemId    String        @id @unique @default(cuid())
  itemSelection ItemSelection @relation(fields: [packItemSelectionId], references: [selectionId], onUpdate: Cascade, onDelete: Cascade)
  pack          Pack          @relation(fields: [packItemPackId], references: [packId])
  createdAt     DateTime      @default(now())
  quantity      Int           @default(1)
  category      String?
  location      String?

  tag                 Tag[]
  packItemPackId      String
  packItemSelectionId String @unique

  @@index([packItemPackId])
}

model Tag {
  tagId     String     @id @unique @default(cuid())
  name      String
  packItems PackItem[]
}
